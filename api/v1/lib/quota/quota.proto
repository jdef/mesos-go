//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package mesos.quota;

import "github.com/mesos/mesos-go/api/v1/lib/mesos.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "quota";
option (gogoproto.benchgen_all) = true;
option (gogoproto.enum_stringer_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_enum_stringer_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.stringer_all) =  true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;


/**
 * Describes the resource guarantees and limits for a role.
 * Persisted in the registry.
 */
message QuotaInfo {
  optional string role = 1;

  // Principal which set the quota. Currently only operators can set quotas.
  optional string principal = 2;

  repeated Resource guarantee = 3 [(gogoproto.nullable) = false];
  repeated Resource limit = 4 [(gogoproto.nullable) = false];
}


/**
 * Describes an update to a role's quota. This is a copy of
 * `QuotaInfo` which omits the principal since it is determined
 * during authentication. Also allows the user to force the update
 * in the case of a guarantee overcommit or a limit exceeding the
 * parent's limit (or overall cluster size if a top level role).
 */
message QuotaRequest {
  // See `guarantee` and `limit` for the behavior of `force`
  // on these two fields.
  optional bool force = 1 [default = false];

  optional string role = 2;

  // Mesos will try its best to ensure that the role can be
  // allocated at least as many resources as the guarantee.
  // Despite this, it's possible for the guarantee to not be
  // satisfiable, if:
  //   (1) The operator has overcommitted guarantees.
  //   (2) There is a loss of agents that such that the
  //       guarantees overcommit the cluster.
  //   (3) The scheduler is pickier than mesos knows about,
  //       e.g. the scheduler needs resources from agents
  //       with specific attributes.
  //
  // The provided guarantee will be validated to ensure it
  // is not overcommitting the cluster. The operator can
  // disable this via `QuotaRequest.force`.
  //
  // If the guarantee is omitted, there is no guarantee.
  //
  // Operators may want to set up alerting to let them know
  // when a guarantee cannot be satisfied.
  //
  // NOTE: The resources must be scalars without additional
  // metadata like reservations, disk information, etc.
  repeated Resource guarantee = 3 [(gogoproto.nullable) = false];

  // EXPERIMENTAL DO NOT USE.
  //
  // This feature is not implementation complete.
  //
  // Imposes a limit on the amount of resources allocated to the
  // role. Mesos will try its best to ensure that the role does
  // not exceed this limit. Despite this, the limit can be exceeded
  // when:
  //   (1) The limit is lowered below the allocation.
  //   (2) Some agents are partitioned and re-connect with
  //       resources allocated to the role.
  //
  // The provided limit will be validated to ensure it does not
  // exceed the total cluster size. The operator can disable
  // this check via `QuotaRequest.force`.
  //
  // If the limit is omitted, there is no limit.
  //
  // Operators may want to set up alerting to let them know
  // when the limit is exceeded.
  //
  // NOTE: The resources must be scalars without additional
  // metadata like reservations, disk information, etc.
  //
  // NOTE: The limit was introduced alongside the v1 `UPDATE_QUOTA`
  // `master::Call`. Note that the old v0 `POST /quota` endpoint and
  // the v1 `SetQuota` `master::Call` continue to implicitly set
  // limit to the guarantee for backwards compatibility. Users
  // should switch to the v1 `UPDATE_QUOTA` `master::Call` which
  // does not implicitly set the limit.
  repeated Resource limit = 4 [(gogoproto.nullable) = false];
}


/**
 * `QuotaStatus` describes the internal representation for the
 * /quota/status response and `GET_QUOTA` `master::Response`.
 */
message QuotaStatus {
  // Returns all non-default quotas. Those ommitted from this
  // list have the default of: no guarantee and no limit.
  repeated QuotaInfo infos = 1 [(gogoproto.nullable) = false];
}
